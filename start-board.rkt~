#lang racket


(define (start-board x y)
  (cond ((and (= x 7) (= y 7)) (begin (add-to-board (cons x y)) '()))
        ((= x 7) (begin (add-to-board (cons x y)) (start-board 0 (+ y 1))))
        (else (begin (add-to-board (cons x y)) (start-board (+ x 1) y)))))

(start-board 0 0)

(define (start-piece)
  (set-piece-at! 3 3 'BLACK)
  (set-piece-at! 4 4 'BLACK)
  (set-piece-at! 3 4 'WHITE)
  (set-piece-at! 4 3 'WHITE)
  (board-to-move (cons 3 3))
  (board-to-move (cons 4 4))
  (board-to-move (cons 3 4))
  (board-to-move (cons 4 3))
  (add-black-list! (cons 3 3))
  (add-black-list! (cons 4 4))
  (add-white-list! (cons 3 4))
  (add-white-list! (cons 4 3)))

(define (start-help move color)
  (set-piece-at! (car move) (cdr move) color)
  (send board board-to-move move)
  (if (equal? color 'WHITE)
      (send board add-white-list! move)
      (send board add-black-list! move)))

(define (start-pieces)
  (start-help (cons 3 3) 'BLACK)
  (start-help (cons 4 4) 'BLACK)
  (start-help (cons 3 4) 'WHITE)
  (start-help (cons 4 3) 'WHTIE))